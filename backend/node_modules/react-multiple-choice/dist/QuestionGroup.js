"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Option = require("./Option");

var _Option2 = _interopRequireDefault(_Option);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var QuestionGroup = function (_React$Component) {
  _inherits(QuestionGroup, _React$Component);

  function QuestionGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, QuestionGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = QuestionGroup.__proto__ || Object.getPrototypeOf(QuestionGroup)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      activeValue: _this.props.defaultValue
    }, _this.handleSelect = function (value) {
      _this.setState({ activeValue: value }, function () {
        _this.props._onChange && _this.props._onChange(_this.state.activeValue, _this.props.questionNumber);
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(QuestionGroup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _onChange = this.props._onChange;

      if (!_onChange) {
        console.error("No onChange handler provided to <QuestionGroup />. Check that your <QuestionGroup /> is wrapped in a <Test /> ");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var style = this.props.style;

      var defaultStyle = {
        flexDirection: "column",
        display: "flex"
      };

      var appliedStyle = style ? _extends({}, style, defaultStyle) : _extends({}, defaultStyle);
      var children = _react2.default.Children.map(this.props.children, function (child) {
        if (child.type === _Option2.default) {
          return _react2.default.cloneElement(child, {
            _isSelected: _this2.state.activeValue === child.props.value,
            _onSelect: function _onSelect(value) {
              return _this2.handleSelect(value);
            }
          });
        } else {
          return child;
        }
      });
      return _react2.default.createElement(
        "div",
        { style: appliedStyle },
        children
      );
    }
  }]);

  return QuestionGroup;
}(_react2.default.Component);

QuestionGroup.propTypes = {
  defaultValue: _propTypes2.default.string
};
exports.default = QuestionGroup;