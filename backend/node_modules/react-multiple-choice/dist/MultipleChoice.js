"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Option = require("./Option");

var _Option2 = _interopRequireDefault(_Option);

var _QuestionGroup = require("./QuestionGroup");

var _QuestionGroup2 = _interopRequireDefault(_QuestionGroup);

var _Question = require("./Question");

var _Question2 = _interopRequireDefault(_Question);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultipleQuestions = function (_React$Component) {
  _inherits(MultipleQuestions, _React$Component);

  function MultipleQuestions() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MultipleQuestions);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MultipleQuestions.__proto__ || Object.getPrototypeOf(MultipleQuestions)).call.apply(_ref, [this].concat(args))), _this), _this.answers = {}, _this.cacheAnswers = function (activeValue, questionNumber) {
      _this.answers[questionNumber] = activeValue;
      _this.props.getAnswers && _this.props.getAnswers(_this.answers);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MultipleQuestions, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var questions = this.props.questions;

      return _react2.default.createElement(
        "div",
        null,
        questions.map(function (question, i) {
          var options = questions[i].options.map(function (option, index) {
            return _react2.default.createElement(
              _Option2.default,
              { value: index.toString() },
              option
            );
          });

          return _react2.default.createElement(
            _react2.default.Fragment,
            null,
            _react2.default.createElement(
              _Question2.default,
              null,
              question.question
            ),
            _react2.default.createElement(
              _QuestionGroup2.default,
              {
                questionNumber: i,
                onChange: function onChange(activeValue, activeQuestionNumber) {
                  return _this2.cacheAnswers(activeValue, activeQuestionNumber);
                }
              },
              options
            )
          );
        })
      );
    }
  }]);

  return MultipleQuestions;
}(_react2.default.Component);

MultipleQuestions.propTypes = {
  questions: _propTypes2.default.array.isRequired,
  getAnswers: _propTypes2.default.func
};
exports.default = MultipleQuestions;